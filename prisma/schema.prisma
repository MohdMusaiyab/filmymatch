// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  password           String
  username           String              @unique
  bio                String?
  phone              String?
  avatar             String?
  emailVerified      Boolean             @default(false)
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  verificationTokens VerificationToken[]
  collections        Collection[]
  comments           Comment[]
  likes              Like[]
  followers          Follow[]            @relation("Follower")
  followings         Follow[]            @relation("Following")
  posts              Post[] // Added relation to posts
  savedPosts         SavedPost[]         @relation("SavedPosts")
  highlightedPosts   HighlightedPost[]   @relation("HighlightedPosts")
}

model SavedPost {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "SavedPosts")
  userId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Prevent duplicates
}

model HighlightedPost {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "HighlightedPosts")
  userId    String
  notes     String? // Optional user notes
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Prevent duplicates
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

enum Category {
  FILMREFLECTION
  ARTICLE
  BOOKS
  MUSIC
  YOUTUBE
  DOCUMENTARY
  PODCAST
  OTHER
}

enum TAGS {
  INSPIRATIONAL
  MOTIVATIONAL
  FUNNY
  LOVE
  SEX
  ROMANCE
  RELATIONSHIP
  FRIENDSHIP
  COLLEGE
  WORK
  FAMILY
  LIFE
  SELFIMPROVEMENT
  SELFHELP
  SELFLOVE
  SELFCARE
  PHILOSOPHY
  PSYCHOLOGY
  SPIRITUALITY
  MENTALHEALTH
  PERSONALDEVELOPMENT
  PERSONALGROWTH
  PERSONALBRAND
  FILMOGRAPHY
  FILMMAKING
  CINEMATOGRAPHY
  SCREENWRITING
  DIRECTING
  ACTING
  PRODUCING
  EDITING
  MUSICPRODUCTION
  OTHER
}

enum Visibility {
  PUBLIC
  PRIVATE
  FOLLOWERS
}

model Post {
  id            String            @id @default(cuid())
  title         String
  description   String
  category      Category
  coverImage    String?
  visibility    Visibility        @default(PRIVATE)
  images        Image[]
  tags          TAGS[]
  isDraft       Boolean           @default(false)
  userId        String // Added author reference
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  collections   Collection[]      @relation("PostsInCollections") // Changed to many-to-many
  comments      Comment[]
  likes         Like[]
  highlightedBy HighlightedPost[] // Added opposite relation field
  savedBy       SavedPost[] // Added opposite relation field
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Existing index
  @@index([userId])
  
  // Performance optimization indexes
  @@index([visibility]) // For filtering by visibility (PUBLIC, PRIVATE, FOLLOWERS)
  @@index([category]) // For filtering by category
  @@index([isDraft]) // For filtering out drafts
  @@index([createdAt]) // For sorting by creation date (most common sort)
  @@index([visibility, isDraft]) // Composite index for common filter combination
  @@index([category, visibility, isDraft]) // Composite index for category + visibility filtering
  @@index([userId, createdAt]) // For user's posts sorted by date
  @@index([visibility, createdAt]) // For public posts sorted by date (most common query)
  
  // Array index for tags filtering (GIN index for array operations)
}

model Collection {
  id          String     @id @default(cuid())
  name        String
  description String?
  coverImage  String?
  visibility  Visibility @default(PRIVATE)
  isDraft     Boolean    @default(false)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]     @relation("PostsInCollections") // Changed to many-to-many
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
}

model Image {
  id          String   @id @default(cuid())
  url         String
  description String?
  postId      String
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId]) // Prevent duplicate likes
  @@index([postId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId]) // Prevent duplicate follows
  @@index([followerId])
  @@index([followingId])
}
